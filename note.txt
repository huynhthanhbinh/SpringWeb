@author BHT - Huynh Thanh Binh - ELCA VN

0. Create Maven Project as maven-archetype-webapp
    0.0 - Should use IntelliJ Ultimate version
    0.1 - Open IntelliJ
    0.2 - New Project --> Choose Maven
    0.3 - Choose maven-archetype-webapp
    0.4 - Fill all fields

1. Configure pom.xml
    1.1 - <properties> -> ${property_name} in version of dependency
    1.2 - <dependencies>
        1.2.0  - spring-core
        1.2.1  - spring-webmvc
        1.2.2  - spring-beans
        1.2.3  - spring-context
        1.2.4  - servlet-api
        1.2.5  - jstl
        1.2.6  - jsp-api
        1.2.7  - log4j
        1.2.8  - mssql-jdbc
        1.2.9  - geronimo-servlet
        1.2.10 - validation-api
        1.2.11 - hibernate-validator

(Remind:
    /webapp folder is the root directory of web application !!!
    /WEB-INF is the folder auto generated !!!)

2. Delete /WEB-INF/index.jsp automatically created on initialization !

3. Configure /WEB-INF/web.xml
    3.0 - Open-tag : <web-app> --> configure namespace (xmlns, xmlns:xsi, xsi...)
    3.1 - Configure <display-name>
    3.2 - Setup <servlet>
        3.2.1 - <servlet-name> [name]
        3.2.2 - <servlet-class> org.springframework.web.servlet.DispatcherServlet
        3.2.3 - <init-param>
            3.2.3.1 - <param-name> contextConfigLocation
            3.2.3.2 - <param-value> /WEB-INF/spring-servlet.xml
        3.2.4 - <load-on-startup> 1 </load-on-startup>
    3.3 - Configure <servlet-mapping>
        3.3.1 - <servlet-name> [name] (the same as configure above)
        3.3.2 - <url-pattern> / <url-pattern>

4. Create context configuration file
    4.1 - Create /WEB-INF/spring-servlet.xml
    4.2 - Configure file spring-servlet.xml
        4.2.1 - Configure <beans> and namespace
        4.2.2 - <context:component-scan base-package="[package_name]"/>
        4.2.3 - <mvc:annotation-driven/>
        4.2.4 - Configure for views, eg.

        <!-- /WEB-INF/views/<page_name>.jsp -->
        <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">

            <!-- Directory of views files -->
            <property name="prefix" value="/WEB-INF/views/"/>
            <!-- Format of views files : .jsp / .html / ... -->
            <property name="suffix" value=".jsp"/>

        </bean>

5. Create controller in your predefine package, for eg.

    package bht.springmvc;

    import org.springframework.stereotype.Controller;
    import org.springframework.ui.ModelMap;
    import org.springframework.web.bind.annotation.RequestMapping;

    @Controller
    public class HelloController {

        @RequestMapping("/hello")
        public String sayHello(ModelMap map) {
            map.addAttribute("msg", "Richard Huynh");
            return "Hello "; // a view name hello
        }
    }

6. Clean Architecture - (MVC v.s 3-tiers)

    MVC       --> Model - View - Controller
    3-tiers   --> Presentation - BusinessLogic - DataAccess
    Hibernate --> using for transfer data/ processing database


     Client       : view consults form ViewResolver
(req) ↓ ↑ (res)
   Controller     : Spring Controller: return model + view name
      ↓ ↑
 Service Layer    : Contact Service <-- ContactServiceImpl
      ↓ ↑
Data Access Layer : Contact DAO     <-- ContactDAOImpl
      ↓ ↑
   Database       : MSSQL, MySQL, pSQL, noSQL,...


*** Annotations according to the Web-Architecture ?

    @Controller  : Create bean, indicate as Controller class
    @Service     : Create bean, indicate as Service class
    @Repository  : Create bean, indicate as DAO class
    @Component   : else as Component of a Service for eg.

*** Some more common Spring-web annotations:

    @Configuration
    @RequestMapping
    @PathVariable
    @RequestParam
    @RequestBody            ???
    @ResponseBody           ???


*** Something else ^^

    @Import
    @ComponentScan
    @ComponentsScan
    @Bean
    @Qualifier
    @Valid
    @ModelAttribute


Clean Maven Build : Terminal --> mvn clean [enter]
Path of properties files in src/main/java/resources
Remember to add prefix: "classpath:<property_file_name>"

Transaction (TX) using for handling transactions (with db)
Ensure succeed or roll back (if fail) : data integrity !!!


7. HIBERNATE + SPRING MVC

    + Mapping : map from record (row) to model object
    + ORM Framework - Object Relational Mapping
    + RDBMS - Relational Database Management System
    + RDBMS eg. MSSQL, MySQL, PostgreSQL, Oracle
    + Hibernate is ORM Framework, free-open-source
    + using core API: JDBC, JTA, JNDI
    + work with Java, don't mind which DBMS grammar
    + Support full common queries from object to raw sql

    Model Object --> Persistent Object

    7.1 - Framework Component

        + Configuration    : for configuring
        + Session Factory  : create connections between app & DBMS
        + Session          : 1 time connection between app & DBMS
        + Transaction      : for managing transaction
        + Query            : for queries eg. HSQL - Hibernate SQL
        + Criteria         : for queries but use Java Expression/ Statements not SQL

    7.2 - Maven Build Dependencies

        + Spring ORM : for Object Relational Mapping
        + Hibernate Core : Hibernate Framework

    7.3 - What is JPA ?

        + Java Persistence API
        + Java ORM for storing, accessing, and managing
          Java objects in a relational database
        + It's not a framework !

        Hibernate ORM is one of the most mature JPA implementation
        Hibernate is still a popular option for ORM in Java

8. Log4j - Spring Logging

    - Library of Apache
    - Support logging eg. data, error, exception,...
    - Multi output support : console, file, ...
    - Local development  : print console log
    - Production version : print file log

    - Multi-levels: ↓ (from highest to lowest)
        + all
        + debug
        + info
        + warn
        + error
        + fatal
        + off

    - Maven dependency: apache log4j
    - Configuration: create log4j.properties in resources

        + rootLogger=DEBUG, FILE, CONSOLE
        + Threshold : log levels per each option
        + MaxFileSize : Max File Capacity
        + MaxBackupIndex : Max Number of log files

    - Log4j log pattern: %d [%t] %-5p (%F: %L) – %m%n

        + Date – Full date until microseconds.
        + Thread – JVM thread logging the output.
        + Logging Mode – INFO/ERROR/DEBUG/WARN.
        + Class – Java Class logging the output.
        + Line  – Line number in java class.
        + Message – The message logged.
        + Default line separator